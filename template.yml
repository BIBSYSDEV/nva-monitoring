AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template stack for NVA monitoring

Resources:

  LambdaRoleTest:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole


  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRoleTest
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"

#  UpdateDashboardHandler:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: dashboard
#      Handler: no.sikt.nva.monitoring.UpdateDashboardHandler::handleRequest
#      Timeout: 900
#      Runtime: java21
#      MemorySize: 1800
#      Role: !GetAtt LambdaRole.Arn
#
#  DeployedStackEventRule:
#    Type: 'AWS::Events::Rule'
#    Properties:
#      Description: 'EventRule'
#      EventPattern:
#        source:
#          - "aws.cloudformation"
#        detail-type:
#          - "AWS API Call via CloudTrail"
#        detail:
#          eventSource:
#            - "cloudformation.amazonaws.com"
#          eventName:
#            - "CreateComplete"
#            - "UpdateComplete"
#      State: "ENABLED"
#      Targets:
#        - Arn: !GetAtt UpdateDashboardHandler.Arn
#          Id: "update-dashboard-target"
#
#  PermissionForEventsToInvokeLambda:
#    Type: "AWS::Lambda::Permission"
#    Properties:
#      FunctionName: !Ref UpdateDashboardHandler
#      Action: "lambda:InvokeFunction"
#      Principal: "events.amazonaws.com"
#      SourceArn: !GetAtt DeployedStackEventRule.Arn
