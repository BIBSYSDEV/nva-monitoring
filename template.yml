AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template stack for NVA monitoring

Parameters:
  NvaMonitoringDashBoardName:
    Type: 'String'
    Default: 'NvaMonitoringDashboard'
    Description: Name monitoring dashboard that will be updated by this lambda

Resources:

  UpdateDashboardHandlerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref UpdateDashboardHandler]]

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole


  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"

  CloudWatchPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub CloudWatchPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:GetDashboard
              - cloudwatch:PutDashboard
              - cloudwatch:DescribeAlarms
            Resource: "*"

  ApiGatewayPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ApiGatewayPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - Apigateway:GET
            Resource: "*"


  UpdateDashboardHandler:
    Type: AWS::Serverless::Function
    DependsOn:
      - DefaultLambdaPermissions
      - CloudWatchPermissions
      - ApiGatewayPermissions
    Properties:
      CodeUri: dashboard
      Handler: no.sikt.nva.monitoring.UpdateDashboardHandler::handleRequest
      Timeout: 900
      Runtime: java21
      Role: !GetAtt LambdaRole.Arn
      MemorySize: 1800
      Environment:
        Variables:
          DASHBOARD_NAME: !Sub "${NvaMonitoringDashBoardName}-${AWS::AccountId}"
      Events:
        StackEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - "aws.cloudformation"
              detail-type:
                - "AWS API Call via CloudTrail"
              detail:
                eventSource:
                  - "cloudformation.amazonaws.com"
                eventName:
                  - "CreateStack"
                  - "UpdateStack"
                  - "DeleteStack"

  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${NvaMonitoringDashBoardName}-${AWS::AccountId}"
      DashboardBody: "{\"widgets\":[]}"

